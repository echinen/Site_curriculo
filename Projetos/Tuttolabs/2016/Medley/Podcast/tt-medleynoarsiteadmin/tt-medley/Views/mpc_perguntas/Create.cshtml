@model tt_medley.Models.mpc_perguntas

@{
    ViewBag.Title = "Create";

    List<SelectListItem> listaPodcast = new List<SelectListItem>();
    if (ViewBag.podcast != null)
    {
        foreach (var item in ViewBag.podcast)
        {
            listaPodcast.Add(new SelectListItem
            {
                Text = item.nome,
                Value = item.id
            });
        }
    }

    var modelPodcast = ViewBag.idPod;

    var listCertas = new SelectList(new[]
    {
        new { ID = "1", Name = "1" },
        new { ID = "2", Name = "2" },
        new { ID = "3", Name = "3" },
        new { ID = "4", Name = "4" },
    },
    "ID", "Name", 1);
}

<h2>Nova pergunta</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "createPergunta" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <p class="control-label col-md-2">Podcast</p>
            @if (ViewBag.idPod == null)
            {
                <div class="col-md-10">
                    @Html.DropDownList("selectPodcast", listaPodcast, new { @class = "form-control" })
                </div>
            }
            else
            {
                <p class="control-label col-md-2">@ViewBag.idPod.nome</p>
                @Html.HiddenFor(model => model.podcast_id, new { @Value = ViewBag.idPod.id })
            }
        </div>

        <div class="form-group">
            <p class="control-label col-md-2">Pergunta</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.pergunta, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.pergunta, "", new { @class = "text-danger" })
                @*<p class="text-danger">@ViewBag.errorMsg</p>*@
            </div>
        </div>

        <div class="form-group">
            <p class="control-label col-md-2">Resposta 1</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.resp1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.resp1, "", new { @class = "text-danger" })
                @*<p class="text-danger">@ViewBag.errorMsg</p>*@
            </div>
        </div>

        <div class="form-group">
            <p class="control-label col-md-2">Resposta 2</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.resp2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.resp2, "", new { @class = "text-danger" })
                @*<p class="text-danger">@ViewBag.errorMsg</p>*@
            </div>
        </div>

        <div class="form-group">
            <p class="control-label col-md-2">Resposta 3</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.resp3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.resp3, "", new { @class = "text-danger" })
                @*<p class="text-danger">@ViewBag.errorMsg</p>*@
            </div>
        </div>

        <div class="form-group">
            <p class="control-label col-md-2">Resposta 4</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.resp4, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.resp4, "", new { @class = "text-danger" })
                @*<p class="text-danger">@ViewBag.errorMsg</p>*@
            </div>
        </div>

        <div class="form-group">
            <p class="control-label col-md-2">Resposta Certa</p>
            <!--<div class="col-md-10">
                @Html.EditorFor(model => model.resp_certa, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.resp_certa, "", new { @class = "text-danger" })
                <p class="text-danger">@ViewBag.errorMsg</p>
            </div>-->
            <div class="col-md-10">
                @Html.DropDownList("respCerta", listCertas, new { @class = "form-control" })
            </div>
        </div>
        <div id="divProcessing">
            <p>Aguarde um momento . . . <img src="../../Content/ajax-loader.gif"></p>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Salvar Pergunta(s)" class="btn btn-primary" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Habilitar Podcast Agora" id="btnHabilitarPodcast" class="btn btn-primary">
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Agendar Podcast" class="btn btn-primary" data-toggle="modal" data-target="#modalHabilitarPodcast" />
            </div>
        </div>
    </div>
}

<a href="@Url.Action("Index", "mpc_usuarios", null)" title="Voltar para a Lista de Podcasts" class="btn btn-info">
    <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
    Voltar
</a>

<!--MODAL - PARA HABILITAR PODCAST-->
<div class="modal fade" id="modalHabilitarPodcast" tabindex="-1" role="dialog" aria-labelledby="Podcast">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="Podcast">Agendar Podcast</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="control-label col-md-2">Data de lançamento</label>
                    <input class="form-control" type="text" id="datalancamento" placeholder="Selecione a Data de Lançamento" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnAgendarPodcast" class="btn btn-primary">Agendar</button>
            </div>
        </div>
    </div>
</div>

@section Style {
    <link href="@Url.Content("~/Content/jquery.datetimepicker.css")" rel="stylesheet" type="text/css" />
}

<script src="@Url.Content("~/Scripts/jquery.datetimepicker.full.min.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(document).ready(function () {

        // Hide the "busy" Gif at load:
        $("#divProcessing").hide();

        //$(function () {
        //    $("#datepicker").datepicker({
        //        format: "dd/mm/yyyy",
        //        language: "pt-BR"
        //    });
        //});

        $(function () {
            $('#datalancamento').datetimepicker({
                format: 'd/m/y H:i',
                dayOfWeekStart: 1
            });
        });

        $('#btnAgendarPodcast').click(function () {
            var dtLancamento = $('#datalancamento').val();
            var podcast = $('#selectPodcast').val();

            $.ajax({
                type: 'GET',
                dataType: 'json',
                contentType: 'application/json',
                data: { dataLancamento: dtLancamento, idPodcast: podcast },
                url: '@Url.Action("AgendarPodcast", "mpc_podcasts")',
                beforeSend: function () {
                    // Show the "busy" Gif:
                    $("#divProcessing").show();
                },
                success: function (result) {
                    // Hide the "busy" Gif at load:
                    $("#divProcessing").hide();
                    alert(result);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    // Hide the "busy" Gif at load:
                    $("#divProcessing").hide();
                    alert("Ocorreu um problema ao tentar agendar o Podcast!");
                }
            });
           
        });

        $('#btnHabilitarPodcast').click(function () {
            var podcast = $('#selectPodcast').val();
            alert('entre create');
            $.ajax({
                type: 'GET',
                dataType: 'json',
                contentType: 'application/json',
                data: { idPodcast: podcast },
                url: '@Url.Action("HabilitarPodcast", "mpc_podcasts")',
                beforeSend: function () {
                    // Show the "busy" Gif:
                    $("#divProcessing").show();
                },
                success: function (result) {
                    // Hide the "busy" Gif at load:
                    $("#divProcessing").hide();
                    alert(result);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    // Hide the "busy" Gif at load:
                    $("#divProcessing").hide();
                    alert("Ocorreu um problema ao tentar habilitar o Podcast! Por favor entre em contato com o administrador do sistema!");
                }
            });
        });

    });
</script>